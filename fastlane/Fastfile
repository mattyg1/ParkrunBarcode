default_platform(:ios)

platform :ios do
  
  # Test automation lane
  lane :test do
    run_tests(
      scheme: "PR Bar Code",
      devices: ["iPhone 16"],
      clean: true,
      code_coverage: true,
      result_bundle: true,
      output_directory: "./test_output"
    )
  end

  # Quick development check - build verification without archiving
  lane :dev_check do
    puts "üîç Running development build check..."
    
    # iOS build check
    build_app(
      scheme: "PR Bar Code",
      configuration: "Debug",
      export_method: "development",
      skip_archive: true,
      destination: "generic/platform=iOS Simulator",
      skip_codesigning: true
    )
    
    # watchOS build check
    build_app(
      scheme: "5K QR Code Watch App Watch App",
      configuration: "Debug",
      skip_archive: true,
      destination: "generic/platform=watchOS Simulator",
      skip_codesigning: true
    )
    
    puts "‚úÖ Development build check completed successfully!"
  end

  # Pre-commit validation
  lane :pre_commit do
    puts "üöÄ Running pre-commit checks..."
    
    # Ensure working directory is clean
    ensure_git_status_clean
    
    # Quick build verification
    dev_check
    
    puts "‚úÖ Pre-commit checks passed!"
  end

  # Test and build verification
  lane :test_and_build do
    puts "üß™ Running comprehensive test and build verification..."
    
    # Clean previous builds
    clean_build_artifacts
    
    # Run tests first
    test
    
    # If tests pass, verify builds work
    dev_check
    
    puts "‚úÖ All tests passed and builds succeeded!"
  end

  # Version bump lane (existing)
  lane :local_version_bump do |options|
    bump_type = options[:bump] || "patch"
    build_number = Time.now.strftime("%Y%m%d%H%M")
    
    # Read current version from project file
    current_version = "1.0.13" # Fallback - should read from project
    
    # Calculate new version
    version_parts = current_version.split('.').map(&:to_i)
    case bump_type
    when "major"
      version_parts[0] += 1
      version_parts[1] = 0
      version_parts[2] = 0
    when "minor"
      version_parts[1] += 1
      version_parts[2] = 0
    when "patch"
      version_parts[2] += 1
    end
    new_version = version_parts.join('.')
    
    puts "üîÑ Updating version from #{current_version} to #{new_version}"
    puts "üîÑ Setting build number to #{build_number}"
    
    # Update project file directly
    project_file = "../PR Bar Code.xcodeproj/project.pbxproj"
    
    # Update MARKETING_VERSION for all targets (handle different existing versions)
    sh "sed -i '' 's/MARKETING_VERSION = 1\\.0\\.13;/MARKETING_VERSION = #{new_version};/g' '#{project_file}'"
    sh "sed -i '' 's/MARKETING_VERSION = 1\\.0\\.5;/MARKETING_VERSION = #{new_version};/g' '#{project_file}'"
    sh "sed -i '' 's/MARKETING_VERSION = 1\\.0;/MARKETING_VERSION = #{new_version};/g' '#{project_file}'"
    sh "sed -i '' 's/MARKETING_VERSION = 1\\.0\\.0;/MARKETING_VERSION = #{new_version};/g' '#{project_file}'"
    
    # Update CURRENT_PROJECT_VERSION for all targets
    sh "sed -i '' 's/CURRENT_PROJECT_VERSION = [0-9]*;/CURRENT_PROJECT_VERSION = #{build_number};/g' '#{project_file}'"
    
    # Note: Project file updated. User should commit manually when ready.
    
    puts "‚úÖ Version bump completed: #{new_version} (#{build_number})"
  end

  # Release preparation (run before creating PR)
  lane :prepare_release do |options|
    puts "üöÄ Preparing release..."
    
    # Ensure we're on a feature branch
    ensure_git_branch(branch: '^(?!main|master)')
    
    # Run full test suite
    test_and_build
    
    # Version bump based on option
    bump_type = options[:bump] || "patch"
    local_version_bump(bump: bump_type)
    
    puts "‚úÖ Release preparation completed!"
    puts "Now create your PR and merge to main."
  end

  # Before all lanes
  before_all do
    # Skip bundle exec requirement for easier local development
  end

  # Error handling
  error do |lane, exception|
    puts "‚ùå Error in lane #{lane}: #{exception.message}"
  end

end